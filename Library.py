import argparse

import psycopg2
from faker import Faker
import random
from datetime import datetime, timedelta


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Faker
fake = Faker('ru_RU')


def populate_writers(connection, count):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∏—Å–∞—Ç–µ–ª–µ–π"""
    # with - —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    with connection.cursor() as cursor:
        for _ in range(count):
            first_name = fake.first_name()
            last_name = fake.last_name()

            cursor.execute(
                "INSERT INTO writers (first_name, last_name) VALUES (%s, %s)",
                (first_name, last_name)
            )
        connection.commit()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –ø–∏—Å–∞—Ç–µ–ª–µ–π")


def populate_books(connection, count):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–Ω–∏–≥"""
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π cursor.
    with connection.cursor() as cursor:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö writer_id
        cursor.execute("SELECT writer_id FROM writers")
        # –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂
        # –ü—Ä–∏–º–µ—Ä: [(1,), (2,), (3,), (5,), (8,)]
        # –ü–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –≤–µ–∑–¥–µ 0 —ç–ª–µ–º–µ–Ω—Ç
        writer_ids = [row[0] for row in cursor.fetchall()]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if not writer_ids:
            print("–ù–µ—Ç –ø–∏—Å–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return

        # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –≤–∞–∂–Ω–æ
        for _ in range(count):
            title = fake.catch_phrase()
            release_date = fake.date_between(start_date='-30y', end_date='today')
            writer_id = random.choice(writer_ids)

            cursor.execute(
                "INSERT INTO books (title, release_date, writer_id) VALUES (%s, %s, %s)",
                (title, release_date, writer_id)
            )

        connection.commit()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –∫–Ω–∏–≥")


def populate_readers(connection, count):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
    with connection.cursor() as cursor:
        for _ in range(count):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
            first_name = fake.first_name()
            last_name = fake.last_name()
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            phone_number = fake.phone_number()
            registration_date = fake.date_between(start_date='-5y', end_date='today')

            cursor.execute(
                "INSERT INTO readers (first_name, last_name, phone_number, registration_date) VALUES (%s, %s, %s, %s)",
                (first_name, last_name, phone_number, registration_date)
            )
        connection.commit()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} —á–∏—Ç–∞—Ç–µ–ª–µ–π")


def should_populate_data(connection):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π, –∫–Ω–∏–≥ –∏ —á–∏—Ç–∞—Ç–µ–ª–µ–π"""
    with connection.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT COUNT(*) FROM writers")
        writers_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM books")
        books_count = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM readers")
        readers_count = cursor.fetchone()[0]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï —Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ
        return writers_count == 0 and books_count == 0 and readers_count == 0


def display_random_readers_and_books(connection):
    """–í—ã–≤–æ–¥ 20 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π –∏ 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥"""
    with connection.cursor() as cursor:
        # –í—ã–≤–æ–¥ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π
        print("=" * 50)
        print("–°–õ–£–ß–ê–ô–ù–´–ï –ß–ò–¢–ê–¢–ï–õ–ò:")
        print("ID\t–ò–º—è\t–§–∞–º–∏–ª–∏—è")
        print("-" * 30)

        cursor.execute("""
            SELECT reader_id, first_name, last_name 
            FROM readers 
            ORDER BY RANDOM() 
            LIMIT 20
        """)
        readers = cursor.fetchall()

        for reader in readers:
            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞: –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ reader —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–≥–æ–º –ø–æ—Ä—è–¥–∫–µ.
            reader_id, first_name, last_name = reader
            print(f"{reader_id}\t{first_name}\t{last_name}")

        # –í—ã–≤–æ–¥ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥
        print("\n" + "=" * 50)
        print("–°–õ–£–ß–ê–ô–ù–´–ï –ö–ù–ò–ì–ò:")
        print("ID\t–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
        print("-" * 30)

        # –ë–µ—Ä—ë–º –∫–Ω–∏–≥–∏ –∏–∑ —Ç–∞–±. books –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –∫ –Ω–∏–º –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏–∑ —Ç–∞–±. writers –ø–æ —Å–≤—è–∑–∏ –∫–ª—é—á–µ–π
        cursor.execute("""
            SELECT b.book_id, b.title, w.first_name, w.last_name 
            FROM books b 
            JOIN writers w ON b.writer_id = w.writer_id 
            ORDER BY RANDOM() 
            LIMIT 20
        """)
        books = cursor.fetchall()

        for book in books:
            book_id, title, author_first, author_last = book
            print(f"{book_id}\t{title} ({author_first} {author_last})")

        return readers, books


def add_book_rating(connection, reader_id, book_id, rating_value):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥–∏ —á–∏—Ç–∞—Ç–µ–ª–µ–º"""
    with connection.cursor() as cursor:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—è –∏ –∫–Ω–∏–≥–∏
            cursor.execute("SELECT reader_id FROM readers WHERE reader_id = %s", (reader_id,))
            if not cursor.fetchone():
                print(f"–û—à–∏–±–∫–∞: –ß–∏—Ç–∞—Ç–µ–ª—å —Å ID {reader_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            cursor.execute("SELECT book_id FROM books WHERE book_id = %s", (book_id,))
            if not cursor.fetchone():
                print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ —Å ID {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∏—Ç–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É
            cursor.execute(
                "SELECT rating_entry_id FROM book_ratings WHERE reader_id = %s AND book_id = %s",
                (reader_id, book_id)
            )
            if cursor.fetchone():
                print(f"–û—à–∏–±–∫–∞: –≠—Ç–æ—Ç —á–∏—Ç–∞—Ç–µ–ª—å —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª –¥–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É")
                return False
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–æ–π –æ—Ü–µ–Ω–∫–∏
            # –ü–æ–ª—É—á–∞–µ–º rating_id –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
            cursor.execute("SELECT rating_id FROM ratings WHERE rating_value = %s", (rating_value,))
            rating_result = cursor.fetchone()

            if not rating_result:
                print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-5")
                return False

            rating_id = rating_result[0]

            # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
            cursor.execute(
                """INSERT INTO book_ratings (reader_id, book_id, rating_id) 
                   VALUES (%s, %s, %s)""",
                (reader_id, book_id, rating_id)
            )
            connection.commit()

            print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ß–∏—Ç–∞—Ç–µ–ª—å ID: {reader_id}")
            print(f"   –ö–Ω–∏–≥–∞ ID: {book_id}")
            print(f"   –û—Ü–µ–Ω–∫–∞: {rating_value}/5")
            return True

        except psycopg2.Error as e:
            connection.rollback()
            print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False


def show_recent_ratings(connection, limit=5):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
    # –° –ª–∏–º–∏—Ç–æ–º –≤—ã–≤–æ–¥–∞ (5 —Å—Ç—Ä–æ–∫)
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT br.rating_entry_id, r.first_name, r.last_name, b.title, 
                   rat.rating_value, br.rating_date
            FROM book_ratings br
            JOIN readers r ON br.reader_id = r.reader_id
            JOIN books b ON br.book_id = b.book_id
            JOIN ratings rat ON br.rating_id = rat.rating_id
            ORDER BY br.rating_date DESC
            LIMIT %s
        """, (limit,))

        ratings = cursor.fetchall()

        if ratings:
            print("\n" + "=" * 50)
            print("–ü–û–°–õ–ï–î–ù–ò–ï –û–¶–ï–ù–ö–ò:")
            print("-" * 50)
            for rating in ratings:
                rating_id, first_name, last_name, title, rating_value, rating_date = rating
                print(f"{first_name} {last_name} -> '{title}' | –û—Ü–µ–Ω–∫–∞: {rating_value}  | {rating_date}")
        else:
            print("\n–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –∫–Ω–∏–≥")


def get_book_rating_stats(connection, book_id=None):

    with connection.cursor() as cursor:
        if book_id is None:
            book_id = input("üéØ –í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏: ").strip()
            if not book_id.isdigit():
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–Ω–∏–≥–∏")
                return
            book_id = int(book_id)

        cursor.execute("""
            SELECT 
                b.title,
                ROUND(AVG(r.rating_value), 2) as avg_rating,
                COUNT(br.rating_id) as rating_count,
                MIN(r.rating_value) as min_rating,
                MAX(r.rating_value) as max_rating
            FROM books b
            LEFT JOIN book_ratings br ON b.book_id = br.book_id
            LEFT JOIN ratings r ON br.rating_id = r.rating_id
            WHERE b.book_id = %s
            GROUP BY b.book_id, b.title
        """, (book_id,))

        result = cursor.fetchone()

        if not result:
            print("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        title, avg_rating, count, min_rating, max_rating = result

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–Ω–∏–≥–∏: \"{title}\"")

        if avg_rating is not None:
            print(f"   ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}/5")
            print(f"   ‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {count}")
            print(f"   ‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {min_rating}/5")
            print(f"   ‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {max_rating}/5")

            # –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            full_stars = int(avg_rating)
            half_star = avg_rating - full_stars >= 0.5
            stars = "‚òÖ" * full_stars + ("¬Ω" if half_star else "")
            print(f"   {stars}")
        else:
            print("   üìù –£ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫")



def main():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    connection_params = {
        'host': 'localhost',
        'database': 'library_rating_system',
        'user': 'postgres',
        'password': 'your_password',
        'port': '5432'
    }

    connection = None

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = psycopg2.connect(**connection_params)
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if should_populate_data(connection):
            print("–ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
            populate_writers(connection, 1000)
            populate_books(connection, 1000)
            populate_readers(connection, 1000)
        else:
            print("–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ")

            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–Ω–∏–≥')
            parser.add_argument('-reader', type=int, help='ID —á–∏—Ç–∞—Ç–µ–ª—è')
            parser.add_argument('-book', type=int, help='ID –∫–Ω–∏–≥–∏')
            parser.add_argument('-rating', type=int, choices=[1, 2, 3, 4, 5], help='–û—Ü–µ–Ω–∫–∞ –∫–Ω–∏–≥–∏ (1-5)')
            parser.add_argument('-stats', type=int, help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–Ω–∏–≥–∏ –ø–æ ID')

            args = parser.parse_args()

            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–∏–≥–∏
            if not any(vars(args).values()):
                readers, books = display_random_readers_and_books(connection)
                show_recent_ratings(connection)

                print("\n" + "=" * 50)
                print("–î–õ–Ø –û–¶–ï–ù–ö–ò –ö–ù–ò–ì–ò –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–û–ú–ê–ù–î–£:")
                print("python script.py -reader [ID_—á–∏—Ç–∞—Ç–µ–ª—è] -book [ID_–∫–Ω–∏–≥–∏] -rating [1-5]")
                print("\n–ü–†–ò–ú–ï–†:")
                if readers and books:
                    random_reader = random.choice(readers)
                    random_book = random.choice(books)
                    print(
                        f"python script.py -reader {random_reader[0]} -book {random_book[0]} -rating {random.randint(1, 5)}")

            # –ï—Å–ª–∏ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫—É
            elif args.reader and args.book and args.rating:
                success = add_book_rating(connection, args.reader, args.book, args.rating)
                if success:
                    show_recent_ratings(connection)

            elif args.stats:
                get_book_rating_stats(connection, args.stats)  # ‚Üê –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: -reader, -book, -rating")
                print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

    except Exception as error:
        print(f"–û—à–∏–±–∫–∞: {error}")
    finally:
        if connection:
            connection.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")